using Knapcode.TorSharp;
using MailKit.Net.Pop3;
using MailKit.Security;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace HandleAnoyMail2
{
    class Program
    {
        private static readonly string TargetMailAddress = "######################";
        private static readonly string MyMailAddress = "######################";
        private static readonly string MyPassword = "######################";
        static async Task Main(string[] args)
        {
            using (var mclient = new Pop3Client())
            {
                mclient.Connect("outlook.office365.com", 995, SecureSocketOptions.Auto);
                mclient.AuthenticationMechanisms.Remove("XOAUTH2");
                mclient.Authenticate(MyMailAddress, MyPassword);
                int i = 0;
                while(true)
                {
                    var message = mclient.GetMessage(mclient.Count - i++ - 1);
                    if(message.Date.Date < DateTime.Today.AddDays(-1))
                    {
                        break;
                    }
                    var t = message.Headers;
                    if (message.From.ToString().Contains(TargetMailAddress))
                    {
                        var settings = new TorSharpSettings
                        {
                            ZippedToolsDirectory = Path.Combine(Path.GetTempPath(), "TorZipped"),
                            ExtractedToolsDirectory = Path.Combine(Path.GetTempPath(), "TorExtracted"),
                            PrivoxySettings = { Port = ###################### },
                            TorSettings =
                           {
                              SocksPort = ######################,
                              ControlPort = ######################,
                              ControlPassword = "######################",
                           },
                        };
                        await new TorSharpToolFetcher(settings, new HttpClient()).FetchAsync();
                        var proxy = new TorSharpProxy(settings);
                        var reg = new Regex(@"https?://(?:[!-~]+\.)+[!-~]+");
                        string url = reg.Match(message.TextBody).Value;
                        using (var handler = new HttpClientHandler() { UseCookies = true , Proxy = new WebProxy(new Uri("http://localhost:" + settings.PrivoxySettings.Port)) })
                        using (var client = new HttpClient(handler))
                        {
                            await proxy.ConfigureAndStartAsync();
                            Console.WriteLine(await client.GetStringAsync("http://api.ipify.org"));
                            await proxy.GetNewIdentityAsync();
                            string MyIp = await client.GetStringAsync("http://api.ipify.org");
                            Console.WriteLine(MyIp);
                            
                            client.DefaultRequestHeaders.Add("User-Agent", "######################");
                            var re10 = new Regex("code=(?<text>.*$?)");
                            var re11 = new Regex("anpiweb(?<text>.*?/)");
                            string urlprex = "######################" + re11.Match(url).Groups[1].Value;
                            /*
                            var p1 = new Dictionary<string, string>()
                            {
                                { "######################", "1" },
                                { "######################", re10.Match(url).Groups[1].Value }
                            };
                            var c1 = new FormUrlEncodedContent(p1);
                            var r1 = await client.PostAsync(urlprex + "######################", c1);
                            CookieCollection cookies = handler.CookieContainer.GetCookies(new Uri(urlprex + "######################"));
                            string ASPNETSessionId = "";
                            foreach (System.Net.Cookie cook in cookies)
                            {
                                if (cook.Name == "######################")
                                {
                                    ASPNETSessionId = cook.Value;
                                }
                            }
                            */
                            // GETでリクエスト
                            var r2 = await client.GetStringAsync(url);
                            var re21 = new Regex("id=\"######################");
                            var re22 = new Regex("id=\"######################");
                            var re23 = new Regex("id=\"######################");

                            var parameters = new Dictionary<string, string>()
                            {
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### }
                            };
                            client.DefaultRequestHeaders.Add("Accept", "######################");
                            client.DefaultRequestHeaders.Add("Connection", "keep-alive");
                            client.DefaultRequestHeaders.Add("Cache-Control", "max-age=0");
                            ######################
                            ######################
                            ######################
                            var content = new FormUrlEncodedContent(parameters);
                            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/x-www-form-urlencoded"));
                            var resp = await client.PostAsync(urlprex + "######################", content);
                            
                            parameters = new Dictionary<string, string>()
                            {
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### },
                                { "######################", ###################### }
                            };
                            client.DefaultRequestHeaders.Clear();
                            client.DefaultRequestHeaders.Add("######################", "######################");
                            client.DefaultRequestHeaders.Add("######################", "######################");
                            client.DefaultRequestHeaders.Add("######################", "######################");
                            client.DefaultRequestHeaders.Add("######################", "######################");
                            client.DefaultRequestHeaders.Add("######################", "######################");
                            client.DefaultRequestHeaders.Add("######################", "######################");
                            client.DefaultRequestHeaders.Add("######################", "######################");
                            client.DefaultRequestHeaders.Add("######################", "######################");
                            client.DefaultRequestHeaders.Add("######################", "######################");
                            client.DefaultRequestHeaders.Add("######################", "######################");
                            client.DefaultRequestHeaders.Add("######################", "######################");
                            client.DefaultRequestHeaders.Add("######################", "######################");
                            client.DefaultRequestHeaders.Add("######################", "######################");
                            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/x-www-form-urlencoded"));
                            content = new FormUrlEncodedContent(parameters);
                            resp = await client.PostAsync(urlprex + ""######################");", content);
                            return;
                        }
                    }
                }
            }
        }
    }
}
